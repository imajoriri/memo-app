// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_app_check/firebase_app_check.dart';
import 'package:firebase_core/firebase_core.dart'
    show Firebase, FirebaseOptions;
import 'package:flutter/foundation.dart'
    show TargetPlatform, defaultTargetPlatform, kIsWeb, kReleaseMode;

Future<void> initializeFirebase() async {
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  await FirebaseAppCheck.instance.activate(
    appleProvider: kReleaseMode ? AppleProvider.appAttest : AppleProvider.debug,
  );
}

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// await initializeFirebase();
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    const isProd = kReleaseMode;
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for android - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.iOS:
        return isProd ? prod : dev;
      case TargetPlatform.macOS:
        return isProd ? prod : dev;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions prod = FirebaseOptions(
    apiKey: 'AIzaSyCKxhyD3zR1-e6Vhffbb6pLcbtxWp7wcQA',
    appId: '1:504383288895:ios:90cda6098369bb60022a8a',
    messagingSenderId: '504383288895',
    projectId: 'memo-app-7a379',
    storageBucket: 'memo-app-7a379.appspot.com',
    iosBundleId: 'com.imajo.memo-app',
  );

  static const FirebaseOptions dev = FirebaseOptions(
    apiKey: 'AIzaSyBCdteoQHRu4WFPNXY4L5zDFa1UwLISV8Q',
    appId: '1:682418822184:ios:36ccec53e65aaa1d94a91d',
    messagingSenderId: '682418822184',
    projectId: 'a-note-dev',
    storageBucket: 'a-note-dev.appspot.com',
    iosBundleId: 'com.imajo.memo-app.dev',
  );
}
